-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- ======== TABLES ========

-- Users Table
CREATE TABLE IF NOT EXISTS users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name TEXT NOT NULL,
    email TEXT UNIQUE NOT NULL,
    password TEXT,
    google_id TEXT,
    role TEXT NOT NULL DEFAULT 'user' CHECK (role IN ('admin', 'president', 'vice_president', 'secretary', 'holdings_write', 'holdings_read', 'user')),
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    profile_picture TEXT,
    description TEXT,
    phone TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Holdings Table (for portfolio tracking)
CREATE TABLE IF NOT EXISTS holdings (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    ticker TEXT NOT NULL,
    company_name TEXT NOT NULL,
    sector TEXT,
    share_count INTEGER NOT NULL,
    cost_basis DECIMAL(16, 2) NOT NULL,
    current_price DECIMAL(16, 2) NOT NULL,
    percent_change DECIMAL(16, 2),
    purchase_date DATE NOT NULL,
    last_updated TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Cash Balance Table
CREATE TABLE IF NOT EXISTS cash (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    amount DECIMAL(16, 2) NOT NULL DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Stock Pitches Table
CREATE TABLE IF NOT EXISTS pitches (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title TEXT NOT NULL,
    analyst TEXT NOT NULL,
    date DATE NOT NULL,
    description TEXT,
    is_buy BOOLEAN NOT NULL,
    amount DECIMAL(16, 2) NOT NULL,
    company TEXT NOT NULL,
    symbol TEXT NOT NULL,
    attachments JSONB DEFAULT '[]'::jsonb,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Newsletters Table
CREATE TABLE IF NOT EXISTS newsletters (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title TEXT NOT NULL,
    author TEXT NOT NULL,
    date DATE NOT NULL,
    content TEXT NOT NULL,
    attachments JSONB DEFAULT '[]'::jsonb,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Meeting Minutes (Notes) Table
CREATE TABLE IF NOT EXISTS notes (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title TEXT NOT NULL,
    author TEXT NOT NULL,
    date DATE NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Events Table (Guest Speakers)
CREATE TABLE IF NOT EXISTS events (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    speaker_name TEXT NOT NULL,
    role TEXT,
    company TEXT,
    title TEXT,
    date DATE NOT NULL,
    description TEXT NOT NULL,
    location TEXT NOT NULL,
    time TEXT NOT NULL,
    contact TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Gallery Images Table
CREATE TABLE IF NOT EXISTS gallery_images (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title TEXT NOT NULL,
    description TEXT,
    src TEXT NOT NULL,
    alt TEXT,
    date DATE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- About Sections Table
CREATE TABLE IF NOT EXISTS about_sections (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    order_index INTEGER NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Home Sections Table
CREATE TABLE IF NOT EXISTS home_sections (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    image_url TEXT NOT NULL,
    order_index INTEGER NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ======== INDEXES ========

-- Indexes for better performance
CREATE INDEX IF NOT EXISTS idx_holdings_ticker ON holdings(ticker);
CREATE INDEX IF NOT EXISTS idx_pitches_symbol ON pitches(symbol);
CREATE INDEX IF NOT EXISTS idx_pitches_date ON pitches(date);
CREATE INDEX IF NOT EXISTS idx_newsletters_date ON newsletters(date);
CREATE INDEX IF NOT EXISTS idx_notes_date ON notes(date);
CREATE INDEX IF NOT EXISTS idx_events_date ON events(date);
CREATE INDEX IF NOT EXISTS idx_gallery_images_date ON gallery_images(date);
CREATE INDEX IF NOT EXISTS idx_about_sections_order ON about_sections(order_index);
CREATE INDEX IF NOT EXISTS idx_home_sections_order ON home_sections(order_index);

-- ======== FUNCTIONS FOR TRIGGERS ========

-- Function to update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- ======== TRIGGERS ========

-- Create triggers for all tables to update the updated_at column
CREATE TRIGGER set_timestamp_users
BEFORE UPDATE ON users
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER set_timestamp_holdings
BEFORE UPDATE ON holdings
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER set_timestamp_cash
BEFORE UPDATE ON cash
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER set_timestamp_pitches
BEFORE UPDATE ON pitches
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER set_timestamp_newsletters
BEFORE UPDATE ON newsletters
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER set_timestamp_notes
BEFORE UPDATE ON notes
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER set_timestamp_events
BEFORE UPDATE ON events
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER set_timestamp_gallery_images
BEFORE UPDATE ON gallery_images
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER set_timestamp_about_sections
BEFORE UPDATE ON about_sections
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER set_timestamp_home_sections
BEFORE UPDATE ON home_sections
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- ======== ROW LEVEL SECURITY (RLS) ========

-- Enable RLS on all tables
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE holdings ENABLE ROW LEVEL SECURITY;
ALTER TABLE cash ENABLE ROW LEVEL SECURITY;
ALTER TABLE pitches ENABLE ROW LEVEL SECURITY;
ALTER TABLE newsletters ENABLE ROW LEVEL SECURITY;
ALTER TABLE notes ENABLE ROW LEVEL SECURITY;
ALTER TABLE events ENABLE ROW LEVEL SECURITY;
ALTER TABLE gallery_images ENABLE ROW LEVEL SECURITY;
ALTER TABLE about_sections ENABLE ROW LEVEL SECURITY;
ALTER TABLE home_sections ENABLE ROW LEVEL SECURITY;

DO $$
DECLARE
    table_name text;
BEGIN
    FOR table_name IN 
        SELECT tablename FROM pg_tables 
        WHERE schemaname = 'public' 
        AND tablename IN ('users', 'holdings', 'cash', 'pitches', 'newsletters', 'notes', 'events', 'gallery_images', 'about_sections', 'home_sections')
    LOOP
        EXECUTE format('CREATE POLICY "Service Role Access for %I" ON %I FOR ALL TO service_role USING (true)', table_name, table_name);
    END LOOP;
END $$;

-- Create public read access policies for public content
CREATE POLICY "Public Read Access to Newsletters" ON newsletters FOR SELECT USING (true);
CREATE POLICY "Public Read Access to Notes" ON notes FOR SELECT USING (true);
CREATE POLICY "Public Read Access to Events" ON events FOR SELECT USING (true);
CREATE POLICY "Public Read Access to Gallery Images" ON gallery_images FOR SELECT USING (true);
CREATE POLICY "Public Read Access to About Sections" ON about_sections FOR SELECT USING (true);
CREATE POLICY "Public Read Access to Home Sections" ON home_sections FOR SELECT USING (true);

-- Create storage buckets with appropriate permissions
INSERT INTO storage.buckets (id, name, public) VALUES 
    ('profile-pictures', 'profile-pictures', true),
    ('attachments', 'attachments', true),
    ('gallery', 'gallery', true),
    ('home-images', 'home-images', true);

-- Set storage permissions 
-- Allow public read access to all storage buckets
CREATE POLICY "Public Read Access to Storage" ON storage.objects
    FOR SELECT 
    USING (bucket_id IN ('profile-pictures', 'attachments', 'gallery', 'home-images'));

-- Allow service role to manage all storage
CREATE POLICY "Service Role Access to Storage" ON storage.objects
    FOR ALL
    TO service_role
    USING (true);