-- WHEN DONE:

-- Create initial admin user (be sure to change this password)
INSERT INTO users (name, email, password, role) VALUES 
('Admin User', 'admin@example.com', 'CHANGE_THIS_PASSWORD_HASH', 'admin');





-- FIRST COPY PASTE THIS:

-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create auth schema if it doesn't exist (for Supabase)
CREATE SCHEMA IF NOT EXISTS auth;

-- ======== TABLES ========

-- Users Table
CREATE TABLE IF NOT EXISTS users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name TEXT NOT NULL,
    email TEXT UNIQUE NOT NULL,
    password TEXT,
    google_id TEXT,
    role TEXT NOT NULL DEFAULT 'user' CHECK (role IN ('admin', 'president', 'vice_president', 'secretary', 'holdings_write', 'holdings_read', 'user')),
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    profile_picture TEXT,
    description TEXT,
    phone TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Holdings Table (for portfolio tracking)
CREATE TABLE IF NOT EXISTS holdings (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    ticker TEXT NOT NULL,
    company_name TEXT NOT NULL,
    sector TEXT,
    share_count INTEGER NOT NULL,
    cost_basis DECIMAL(16, 2) NOT NULL,
    current_price DECIMAL(16, 2) NOT NULL,
    purchase_date DATE NOT NULL,
    last_updated TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Cash Balance Table
CREATE TABLE IF NOT EXISTS cash (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    amount DECIMAL(16, 2) NOT NULL DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Stock Pitches Table
CREATE TABLE IF NOT EXISTS pitches (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title TEXT NOT NULL,
    analyst TEXT NOT NULL,
    date DATE NOT NULL,
    description TEXT,
    is_buy BOOLEAN NOT NULL,
    amount DECIMAL(16, 2) NOT NULL,
    company TEXT NOT NULL,
    symbol TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Newsletters Table
CREATE TABLE IF NOT EXISTS newsletters (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title TEXT NOT NULL,
    author TEXT NOT NULL,
    date DATE NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Meeting Minutes (Notes) Table
CREATE TABLE IF NOT EXISTS notes (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title TEXT NOT NULL,
    author TEXT NOT NULL,
    date DATE NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Events Table (Guest Speakers)
CREATE TABLE IF NOT EXISTS events (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    speaker_name TEXT NOT NULL,
    role TEXT,
    company TEXT,
    title TEXT,
    date DATE NOT NULL,
    description TEXT NOT NULL,
    location TEXT NOT NULL,
    time TEXT NOT NULL,
    contact TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Gallery Images Table
CREATE TABLE IF NOT EXISTS gallery_images (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title TEXT NOT NULL,
    description TEXT,
    src TEXT NOT NULL,
    alt TEXT,
    date DATE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- About Sections Table
CREATE TABLE IF NOT EXISTS about_sections (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    order_index INTEGER NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Home Sections Table
CREATE TABLE IF NOT EXISTS home_sections (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    image_url TEXT NOT NULL,
    order_index INTEGER NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ======== INDEXES ========

-- Indexes for better performance
CREATE INDEX IF NOT EXISTS idx_holdings_ticker ON holdings(ticker);
CREATE INDEX IF NOT EXISTS idx_pitches_symbol ON pitches(symbol);
CREATE INDEX IF NOT EXISTS idx_pitches_date ON pitches(date);
CREATE INDEX IF NOT EXISTS idx_newsletters_date ON newsletters(date);
CREATE INDEX IF NOT EXISTS idx_notes_date ON notes(date);
CREATE INDEX IF NOT EXISTS idx_events_date ON events(date);
CREATE INDEX IF NOT EXISTS idx_gallery_images_date ON gallery_images(date);
CREATE INDEX IF NOT EXISTS idx_about_sections_order ON about_sections(order_index);
CREATE INDEX IF NOT EXISTS idx_home_sections_order ON home_sections(order_index);

-- ======== FUNCTIONS FOR TRIGGERS ========

-- Function to update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- ======== TRIGGERS ========

-- Create triggers for all tables to update the updated_at column
CREATE TRIGGER set_timestamp_users
BEFORE UPDATE ON users
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER set_timestamp_holdings
BEFORE UPDATE ON holdings
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER set_timestamp_cash
BEFORE UPDATE ON cash
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER set_timestamp_pitches
BEFORE UPDATE ON pitches
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER set_timestamp_newsletters
BEFORE UPDATE ON newsletters
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER set_timestamp_notes
BEFORE UPDATE ON notes
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER set_timestamp_events
BEFORE UPDATE ON events
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER set_timestamp_gallery_images
BEFORE UPDATE ON gallery_images
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER set_timestamp_about_sections
BEFORE UPDATE ON about_sections
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER set_timestamp_home_sections
BEFORE UPDATE ON home_sections
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- ======== ROW LEVEL SECURITY (RLS) ========

-- Enable RLS on all tables
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE holdings ENABLE ROW LEVEL SECURITY;
ALTER TABLE cash ENABLE ROW LEVEL SECURITY;
ALTER TABLE pitches ENABLE ROW LEVEL SECURITY;
ALTER TABLE newsletters ENABLE ROW LEVEL SECURITY;
ALTER TABLE notes ENABLE ROW LEVEL SECURITY;
ALTER TABLE events ENABLE ROW LEVEL SECURITY;
ALTER TABLE gallery_images ENABLE ROW LEVEL SECURITY;
ALTER TABLE about_sections ENABLE ROW LEVEL SECURITY;
ALTER TABLE home_sections ENABLE ROW LEVEL SECURITY;

-- Create a custom function to check role-based access
CREATE OR REPLACE FUNCTION auth.has_role(required_roles TEXT[])
RETURNS BOOLEAN AS $$
DECLARE
    current_role TEXT;
BEGIN
    -- Get the role of the currently authenticated user
    -- This uses Supabase's auth.uid() function to get the current user's ID
    SELECT role INTO current_role FROM users WHERE id = auth.uid();
    RETURN current_role = ANY(required_roles);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create a function to check if a user has permissions to view their own data
CREATE OR REPLACE FUNCTION auth.is_self(user_id UUID)
RETURNS BOOLEAN AS $$
BEGIN
    RETURN auth.uid() = user_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- RLS Policies for users
-- Only admins can see all users, users can only see themselves
CREATE POLICY users_read_policy ON users
    FOR SELECT
    USING (
        auth.has_role(ARRAY['admin', 'president', 'vice_president']) OR 
        auth.is_self(id)
    );

-- Only admins and leadership can update user roles
CREATE POLICY users_role_update_policy ON users
    FOR UPDATE
    USING (auth.has_role(ARRAY['admin', 'president', 'vice_president']))
    WITH CHECK (
        auth.has_role(ARRAY['admin', 'president', 'vice_president']) OR
        auth.is_self(id)
    );

-- Users can update their own profile, but not role
CREATE POLICY users_self_update_policy ON users
    FOR UPDATE
    USING (auth.is_self(id))
    WITH CHECK (
        auth.is_self(id) AND 
        OLD.role = NEW.role  -- Can't change their own role
    );

-- Only admins can delete users
CREATE POLICY users_delete_policy ON users
    FOR DELETE
    USING (
        -- Allow admins to delete any user
        auth.has_role(ARRAY['admin']) OR 
        -- Allow presidents and vice_presidents to delete non-admin users
        (auth.has_role(ARRAY['president', 'vice_president']) AND 
         users.role != 'admin') OR
        -- Allow users to delete their own accounts
        auth.is_self(id)
    );
	
-- Any user can create an account
CREATE POLICY users_insert_policy ON users
    FOR INSERT
    WITH CHECK (true);

-- RLS Policies for holdings
-- Users with HOLDINGS_READ can read holdings
CREATE POLICY holdings_read_policy ON holdings
    FOR SELECT
    USING (auth.has_role(ARRAY['admin', 'president', 'vice_president', 'secretary', 'holdings_write', 'holdings_read']));

-- Only users with HOLDINGS_WRITE can modify holdings
CREATE POLICY holdings_write_policy ON holdings
    FOR ALL
    USING (auth.has_role(ARRAY['admin', 'president', 'vice_president', 'holdings_write']));

-- RLS Policies for cash
-- Users with HOLDINGS_READ can read cash balance
CREATE POLICY cash_read_policy ON cash
    FOR SELECT
    USING (auth.has_role(ARRAY['admin', 'president', 'vice_president', 'secretary', 'holdings_write', 'holdings_read']));

-- Only users with HOLDINGS_WRITE can modify cash
CREATE POLICY cash_write_policy ON cash
    FOR ALL
    USING (auth.has_role(ARRAY['admin', 'president', 'vice_president', 'holdings_write']));

-- RLS Policies for pitches
-- Users with HOLDINGS_READ can read pitches
CREATE POLICY pitches_read_policy ON pitches
    FOR SELECT
    USING (auth.has_role(ARRAY['admin', 'president', 'vice_president', 'secretary', 'holdings_write', 'holdings_read']));

-- Only users with HOLDINGS_WRITE can modify pitches
CREATE POLICY pitches_write_policy ON pitches
    FOR ALL
    USING (auth.has_role(ARRAY['admin', 'president', 'vice_president', 'holdings_write']));

-- RLS Policies for newsletters
-- All users can read newsletters
CREATE POLICY newsletters_read_policy ON newsletters
    FOR SELECT
    USING (true);

-- Only admins can modify newsletters
CREATE POLICY newsletters_write_policy ON newsletters
    FOR ALL
    USING (auth.has_role(ARRAY['admin', 'president', 'vice_president']));

-- RLS Policies for notes (meeting minutes)
-- All users can read notes
CREATE POLICY notes_read_policy ON notes
    FOR SELECT
    USING (true);

-- Only secretary and above can modify notes
CREATE POLICY notes_write_policy ON notes
    FOR ALL
    USING (auth.has_role(ARRAY['admin', 'president', 'vice_president', 'secretary']));

-- RLS Policies for events
-- All users can read events
CREATE POLICY events_read_policy ON events
    FOR SELECT
    USING (true);

-- Only admins can modify events
CREATE POLICY events_write_policy ON events
    FOR ALL
    USING (auth.has_role(ARRAY['admin', 'president', 'vice_president']));

-- RLS Policies for gallery_images
-- All users can read gallery images
CREATE POLICY gallery_images_read_policy ON gallery_images
    FOR SELECT
    USING (true);

-- Only secretary and above can modify gallery images
CREATE POLICY gallery_images_write_policy ON gallery_images
    FOR ALL
    USING (auth.has_role(ARRAY['admin', 'president', 'vice_president', 'secretary']));

-- RLS Policies for about_sections
-- All users can read about sections
CREATE POLICY about_sections_read_policy ON about_sections
    FOR SELECT
    USING (true);

-- Only admins can modify about sections
CREATE POLICY about_sections_write_policy ON about_sections
    FOR ALL
    USING (auth.has_role(ARRAY['admin', 'president', 'vice_president']));

-- RLS Policies for home_sections
-- All users can read home sections
CREATE POLICY home_sections_read_policy ON home_sections
    FOR SELECT
    USING (true);

-- Only admins can modify home sections
CREATE POLICY home_sections_write_policy ON home_sections
    FOR ALL
    USING (auth.has_role(ARRAY['admin', 'president', 'vice_president']));









-- Create storage buckets with appropriate permissions
INSERT INTO storage.buckets (id, name, public) VALUES 
    ('profile-pictures', 'Profile Pictures', true),
    ('attachments', 'Attachments', true),
    ('gallery', 'Gallery Images', true),
    ('home-images', 'Home Page Images', true);

-- Create RLS policies for storage buckets
CREATE POLICY "Profile pictures are accessible to everyone" ON storage.objects
    FOR SELECT USING (bucket_id = 'profile-pictures');

CREATE POLICY "Only authenticated users can upload profile pictures" ON storage.objects
    FOR INSERT WITH CHECK (
        bucket_id = 'profile-pictures' AND
        auth.role() = 'authenticated'
    );

CREATE POLICY "Users can update their own profile pictures" ON storage.objects
    FOR UPDATE USING (
        bucket_id = 'profile-pictures' AND
        (storage.foldername(name))[1] = auth.uid()::text
    );

CREATE POLICY "Attachments are accessible to everyone" ON storage.objects
    FOR SELECT USING (bucket_id = 'attachments');

CREATE POLICY "Only authenticated users with proper roles can upload attachments" ON storage.objects
    FOR INSERT WITH CHECK (
        bucket_id = 'attachments' AND
        auth.role() = 'authenticated' AND
        (EXISTS (
            SELECT 1 FROM users
            WHERE id = auth.uid() AND
            role IN ('admin', 'president', 'vice_president', 'secretary', 'holdings_write')
        ))
    );

CREATE POLICY "Gallery images are accessible to everyone" ON storage.objects
    FOR SELECT USING (bucket_id = 'gallery');

CREATE POLICY "Only users with secretary role or above can upload gallery images" ON storage.objects
    FOR INSERT WITH CHECK (
        bucket_id = 'gallery' AND
        auth.role() = 'authenticated' AND
        (EXISTS (
            SELECT 1 FROM users
            WHERE id = auth.uid() AND
            role IN ('admin', 'president', 'vice_president', 'secretary')
        ))
    );

CREATE POLICY "Home images are accessible to everyone" ON storage.objects
    FOR SELECT USING (bucket_id = 'home-images');

CREATE POLICY "Only admins can upload home images" ON storage.objects
    FOR INSERT WITH CHECK (
        bucket_id = 'home-images' AND
        auth.role() = 'authenticated' AND
        (EXISTS (
            SELECT 1 FROM users
            WHERE id = auth.uid() AND
            role IN ('admin', 'president', 'vice_president')
        ))
    );